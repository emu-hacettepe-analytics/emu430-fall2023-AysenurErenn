---
title: "Assignment 2"
---

# Assignment 2

### Question 1
```{r}
# Loading necessary libraries
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
library(knitr)
library(reshape2)

# Defining the url before 2010
url_before_2010 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&sort=moviemeter,asc&num_votes=2500,&country_of_origin=TR&count=250"

# Defining the url years between 2010 and now
url_2010_2023 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&sort=moviemeter,asc&num_votes=2500,&country_of_origin=TR&count=250"

```

### Question 2
```{r}
data_1 <- read_html(url_before_2010)

# Scraping and cleaning movie datas before year 2010
name_1 <- data_1 |> html_nodes('.ipc-title__text')
name_1 <- html_text(name_1)
name_1 <- tail(head(name_1,-1),-1)
name_1 <- str_split(name_1, " ", n=2)
name_1 <- unlist(lapply(name_1, function(x) {x[2]}))

rating_1 <-data_1 |> html_nodes('.ratingGroup--imdb-rating')
rating_1 <- html_text(rating_1)
rating_1 <- substr(rating_1,1,3)
rating_1 <- as.numeric(rating_1)

year_1 <- data_1 |> html_nodes('.dli-title-metadata-item:nth-child(1)')
year_1 <- html_text(year_1)
year_1 <- as.numeric(year_1)

duration_1 <- data_1 |> html_nodes('.dli-title-metadata-item:nth-child(2)')
duration_1 <- html_text(duration_1)
duration_1 <- 60*as.numeric(substr(duration_1,1,1))+ifelse(nchar(duration_1)>2,as.integer(substring(duration_1,nchar(duration_1)-2,nchar(duration_1)-1)),0)

vote_1 <- data_1 |> html_nodes('.kRnqtn')
vote_1 <- html_text(vote_1)
vote_1 <- sub(pattern = "Votes", replacement = "", x = vote_1)
vote_1 <- sub(pattern = ",", replacement = "", x = vote_1)
vote_1 <- as.numeric(vote_1)

# Scraping and cleaning movie datas after year 2010
data_2 <- read_html(url_2010_2023)

name_2 <- data_2 |> html_nodes('.ipc-title__text')
name_2 <- html_text(name_2)
name_2 <- tail(head(name_2,-1),-1)
name_2 <- str_split(name_2, " ", n=2)
name_2 <- unlist(lapply(name_2, function(x) {x[2]}))

rating_2 <- data_2 |> html_nodes('.ratingGroup--imdb-rating')
rating_2 <- html_text(rating_2)
rating_2 <- substr(rating_2,1,3)
rating_2 <- as.numeric(rating_2)

year_2 <- data_2 |> html_nodes('.dli-title-metadata-item:nth-child(1)')
year_2 <- html_text(year_2)
year_2 <- as.numeric(year_2)

duration_2 <- data_2 |> html_nodes('.dli-title-metadata-item:nth-child(2)')
duration_2 <- html_text(duration_2)
duration_2 <- 60*as.numeric(substr(duration_2,1,1))+ifelse(nchar(duration_2)>2,as.integer(substring(duration_2,nchar(duration_2)-2,nchar(duration_2)-1)),0)

vote_2 <- data_2 |> html_nodes('.kRnqtn')
vote_2 <- html_text(vote_2)
vote_2 <- sub(pattern = "Votes", replacement = "", x = vote_2)
vote_2 <- sub(pattern = ",", replacement = "", x = vote_2)
votes_2 <-as.numeric(vote_2)

# Combining two link's datas
Names <- c(name_1,name_2)
Ratings <- c(rating_1,rating_2)
Years <-c(year_1,year_2)
Durations <-c(duration_1,duration_2)
Votes <-c(vote_1,vote_2)

movies <- data.frame(Names,Years,Durations,Ratings,Votes)
kable(head(movies, 10), caption = "Movies Dataframe")
```

### Question 2
#a-)

```{r}
# Arrange the data frame in descending order by Rating
movies <- movies[order(movies$Ratings, decreasing = TRUE),]

# Top 5 and bottom 5 movies based on user ratings
top5_movies <- head(movies, 5)
bottom5_movies <- tail(movies, 5)

# Print top and bottom movies
cat("Top 5 Movies:\n")
print(top5_movies)
cat("Bottom 5 Movies:\n")
print(bottom5_movies)
```


